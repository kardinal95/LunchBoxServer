openapi: "3.0.0"
info:
  description: This is the swagger file that goes with our server code
  version: "1.0.0"
  title: Swagger REST Article
servers:
  - url: /api
    description: api path
paths:
  /manage/auth/login:
    post:
      summary: Возвращает токен при успешной авторизации
      operationId: py.endpoints.authentication.authorize_ep
      tags:
        - auth
      requestBody:
        description: Логин и пароль
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthData'
      responses:
        200:
          description: JWT токен
          content:
            'text/plain':
              schema:
                type: string
        400:
          description: Некорректная авторизация
  /manage/auth/validate:
    get:
      summary: Информация о валидности токена
      operationId: py.endpoints.authentication.validate_ep
      tags:
        - auth
      security:
        - jwt: []
      responses:
        200:
          description: Успех
  /manage/auth/refresh:
    get:
      summary: Получить обновленный токен
      operationId: py.endpoints.authentication.refresh_ep
      tags:
        - auth
      security:
        - jwt: []
      responses:
        200:
          description: JWT токен
          content:
            'text/plain':
              schema:
                type: string
  /public/users/password/change:
    post:
      summary: Изменить пароль текущего пользователя
      operationId: py.endpoints.users.change_current_password_ep
      tags:
        - users
      security:
        - jwt: []
      requestBody:
        description: Новый пароль
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassChange'
      responses:
        200:
          description: Успех
  /manage/users/add:
    post:
      summary: Добавить нового пользователя
      operationId: py.endpoints.users.add_user_ep
      tags:
        - users
      security:
        - jwt: []
      requestBody:
        description: Данные нового пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        200:
          description: Успех
        400:
          description: Ошибка в данных
  /manage/users/{id}:
    get:
      summary: Получить данные пользователя
      operationId: py.endpoints.users.get_user_with_id_ep
      tags:
        - users
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /manage/users/{id}/roles:
    get:
      summary: Получить роли пользователя
      operationId: py.endpoints.users.get_user_with_id_roles_ep
      tags:
        - users
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Успех
  /manage/users/{id}/roles/edit:
    post:
      summary: Изменить роли пользователя
      operationId: py.endpoints.users.edit_user_with_id_roles_ep
      tags:
        - users
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        description: Список ID ролей пользователя
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                minimum: 1
      responses:
        200:
          description: Успех
  /manage/users/roles:
    get:
      summary: Получить возможные роли
      operationId: py.endpoints.users.get_roles_ep
      tags:
        - users
      security:
        - jwt: []
      responses:
        200:
          description: Успех
  /manage/products:
    get:
      summary: Получить список всех продуктов
      operationId: py.endpoints.products.get_products_ep
      tags:
        - products
      security:
        - jwt: []
      parameters:
        - $ref: '#/components/parameters/locked'
        - $ref: '#/components/parameters/archived'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        401:
          description: Пользователь не авторизован
        403:
          description: Недопустимая операция для текущего пользователя
  /manage/products/{id}:
    get:
      summary: Получить продукт с указанным id
      operationId: py.endpoints.products.get_product_with_id_ep
      tags:
        - products
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: Продукт с указанным id не найден
        401:
          description: Пользователь не авторизован
        403:
          description: Недопустимая операция для текущего пользователя
  /manage/products/{id}/edit:
    post:
      summary: Изменить продукт с указанным id
      operationId: py.endpoints.products.edit_product_with_id_ep
      tags:
        - products
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        description: Обновленные данные продукта
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductEdit'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: Продукт с указанным id не найден
        401:
          description: Пользователь не авторизован
        403:
          description: Недопустимая операция для текущего пользователя
  /manage/products/{id}/remove:
    post:
      summary: Удалить продукт с указанным id
      operationId: py.endpoints.products.remove_product_with_id_ep
      tags:
        - products
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Успех
        404:
          description: Продукт с указанным id не найден
        401:
          description: Пользователь не авторизован
        403:
          description: Недопустимая операция для текущего пользователя
  /manage/products/{id}/archive:
    post:
      summary: Архивировать продукт с указанным id
      operationId: py.endpoints.products.archive_product_with_id_ep
      tags:
        - products
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: Продукт с указанным id не найден
        401:
          description: Пользователь не авторизован
        403:
          description: Недопустимая операция для текущего пользователя
  /manage/products/{id}/lock:
    post:
      summary: Заблокировать продукт с указанным id
      operationId: py.endpoints.products.lock_product_with_id_ep
      tags:
        - products
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: Продукт с указанным id не найден
        401:
          description: Пользователь не авторизован
        403:
          description: Недопустимая операция для текущего пользователя
  /manage/products/add:
    post:
      summary: Добавить новый продукт
      operationId: py.endpoints.products.add_product_ep
      tags:
        - products
      security:
        - jwt: []
      requestBody:
        description: Данные нового продукта
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductEdit"
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        401:
          description: Пользователь не авторизован
        403:
          description: Недопустимая операция для текущего пользователя
  /manage/lunchboxes:
    get:
      summary: Список всех ланчбоксов
      operationId: py.endpoints.lunchboxes.get_lunchboxes_ep
      tags:
        - lunchboxes
      parameters:
        - $ref: '#/components/parameters/locked'
        - $ref: '#/components/parameters/archived'
      security:
        - jwt: []
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Lunchbox"
  /manage/lunchboxes/{id}:
    get:
      summary: Получить ланчбокс с указанным id
      operationId: py.endpoints.lunchboxes.get_lunchbox_with_id_ep
      tags:
        - lunchboxes
      parameters:
        - $ref: "#/components/parameters/id"
      security:
        - jwt: []
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lunchbox"
        404:
          description: Ланчбокс с указанным id не найден
  /manage/lunchboxes/{id}/full:
    get:
      summary: Получить ланчбокс (полные данные) с указанным id
      operationId: py.endpoints.lunchboxes.get_lunchbox_full_with_id_ep
      tags:
        - lunchboxes
      parameters:
        - $ref: "#/components/parameters/id"
      security:
        - jwt: []
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LunchboxFull"
        404:
          description: Ланчбокс с указанным id не найден
  /manage/lunchboxes/{id}/products:
    get:
      summary: Получить продукты из ланчбокса с указанным id
      operationId: py.endpoints.lunchboxes.get_lunchbox_products_with_id_ep
      tags:
        - lunchboxes
      parameters:
        - $ref: "#/components/parameters/id"
      security:
        - jwt: []
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        404:
          description: Ланчбокс с указанным id не найден
  /manage/lunchboxes/{id}/edit:
    post:
      summary: Изменить ланчбокс с указанным id
      operationId: py.endpoints.lunchboxes.edit_lunchbox_with_id_ep
      tags:
        - lunchboxes
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        description: Обновленные данные ланчбокса
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LunchboxEdit'
      responses:
        200:
          description: Успех
        404:
          description: Ланчбокс с указанным id не найден
  /manage/lunchboxes/{id}/archive:
    post:
      summary: Архивировать ланчбокс с указанным id
      operationId: py.endpoints.lunchboxes.archive_lunchbox_with_id_ep
      tags:
        - lunchboxes
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Успех
        404:
          description: Ланчбокс с указанным id не найден
  /manage/lunchboxes/{id}/lock:
    post:
      summary: Заблокировать ланчбокс с указанным id
      operationId: py.endpoints.lunchboxes.lock_lunchbox_with_id_ep
      tags:
        - lunchboxes
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Успех
        404:
          description: Ланчбокс с указанным id не найден
  /manage/lunchboxes/{id}/stock:
    post:
      summary: Изменить наличие ланчбокса с указанным id
      operationId: py.endpoints.lunchboxes.stock_lunchbox_with_id_ep
      tags:
        - lunchboxes
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/stock"
      responses:
        200:
          description: Успех
        404:
          description: Ланчбокс с указанным id не найден
  /manage/lunchboxes/{id}/remove:
    post:
      summary: Удалить ланчбокс с указанным id
      operationId: py.endpoints.lunchboxes.remove_lunchbox_with_id_ep
      tags:
        - lunchboxes
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Успех
        404:
          description: Ланчбокс с указанным id не найден
  /manage/lunchboxes/add:
    post:
      summary: Добавить новый ланчбокс
      operationId: py.endpoints.lunchboxes.add_lunchbox_ep
      tags:
        - lunchboxes
      security:
        - jwt: []
      requestBody:
        description: Данные ланчбокса
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LunchboxEdit'
      responses:
        200:
          description: Успех
  /public/lunchboxes/:
    get:
      summary: Список всех ланчбоксов (клиент)
      operationId: py.endpoints.lunchboxes.get_pub_lunchboxes_ep
      tags:
        - public lunchboxes
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LunchboxClient"
  /public/lunchboxes/{id}:
    get:
      summary: Получить ланчбокс с указанным id
      operationId: py.endpoints.lunchboxes.get_pub_lunchbox_with_id_ep
      tags:
        - public lunchboxes
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LunchboxClient"
        404:
          description: Ланчбокс с указанным id не найден
  /public/lunchboxes/{id}/full:
    get:
      summary: Получить ланчбокс (полные данные) с указанным id
      operationId: py.endpoints.lunchboxes.get_pub_lunchbox_full_with_id_ep
      tags:
        - public lunchboxes
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LunchboxClientFull"
        404:
          description: Ланчбокс с указанным id не найден
  /public/lunchboxes/{id}/products:
    get:
      summary: Получить продукты из ланчбокса с указанным id
      operationId: py.endpoints.lunchboxes.get_pub_lunchbox_products_with_id_ep
      tags:
        - public lunchboxes
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductEdit"
        404:
          description: Ланчбокс с указанным id не найден
  /public/timeslots:
    get:
      summary: Список всех временных слотов доступных для совершения заказа
      operationId: py.endpoints.common.get_timeslots_ep
      tags:
        - timeslots
      responses:
        200:
          description: Успех
  /public/orders/statuses:
    get:
      summary: Список всех статусов
      operationId: py.endpoints.common.get_statuses_ep
      tags:
        - statuses
      responses:
        200:
          description: Успех
  /public/orders/make:
    post:
      summary: Сделать новый заказ
      operationId: py.endpoints.orders.make_new_order_ep
      tags:
        - orders
      requestBody:
        description: Данные заказа
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderEdit"
      security:
        - jwt: []
      responses:
        200:
          description: Успех
  /public/orders/:
    get:
      summary: Получить список заказов (текущего пользователя)
      operationId: py.endpoints.orders.get_orders_ep
      tags:
        - orders
      parameters:
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      security:
        - jwt: []
      responses:
        200:
          description: Успех
  /public/orders/{id}:
    get:
      summary: Получить заказ с указанным id (текущего пользователя)
      operationId: py.endpoints.orders.get_order_ep
      tags:
        - orders
      parameters:
        - $ref: "#/components/parameters/id"
      security:
        - jwt: []
      responses:
        200:
          description: Успех
  /public/orders/{id}/cancel:
    post:
      summary: Отменить заказ с указанным id (текущего пользователя)
      operationId: py.endpoints.orders.cancel_order_ep
      tags:
        - orders
      parameters:
        - $ref: "#/components/parameters/id"
      security:
        - jwt: []
      responses:
        200:
          description: Успех
  /manage/orders/active:
    get:
      summary: Получить все активные заказы на текущий день
      operationId: py.endpoints.orders.manage_get_orders_active_ep
      tags:
        - orders
      security:
        - jwt: []
      responses:
        200:
          description: Успех
  /manage/orders/{id}/confirm:
    post:
      summary: Подтвердить получение заказа
      operationId: py.endpoints.orders.manage_confirm_order_ep
      tags:
        - orders
      parameters:
        - $ref: "#/components/parameters/id"
      security:
        - jwt: []
      responses:
        200:
          description: Успех
  /manage/orders/{id}/refuse:
    post:
      summary: Пометить заказ как просроченный
      operationId: py.endpoints.orders.manage_refuse_order_ep
      tags:
        - orders
      parameters:
        - $ref: "#/components/parameters/id"
      security:
        - jwt: []
      responses:
        200:
          description: Успех
  /manage/orders/late:
    get:
      summary: Получить заказы с опозданием
      operationId: py.endpoints.orders.manage_get_late_orders_ep
      tags:
        - orders
      security:
        - jwt: []
      responses:
        200:
          description: Успех
components:
  schemas:
    AuthData:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
        password:
          type: string
          format: password
    Product:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          pattern: ".{6,}"
        description:
          type: string
        locked:
          type: boolean
        archived:
          type: boolean
    ProductEdit:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          pattern: ".{6,}"
        description:
          type: string
    PassChange:
      type: object
      required:
        - old
        - new
      properties:
        old:
          type: string
          format: password
        new:
          type: string
          format: password
          pattern: ".{6,}"
    NewUser:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          pattern: ".{6,}"
        password:
          type: string
          format: password
          pattern: ".{6,}"
        name:
          type: string
        phone:
          type: string
    User:
      type: object
      required:
        - login
      properties:
        login:
          type: string
          pattern: ".{6,}"
        name:
          type: string
        phone:
          type: string
    LunchboxFull:
      type: object
      required:
        - id
        - name
        - price
        - products
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          pattern: ".{6,}"
        price:
          type: integer
          minimum: 1
          format: int32
        products:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Product"
        stock:
          type: boolean
        archived:
          type: boolean
        locked:
          type: boolean
    Lunchbox:
      type: object
      required:
        - id
        - name
        - price
        - products
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          pattern: ".{6,}"
        price:
          type: integer
          minimum: 1
          format: int32
        products:
          type: array
          minItems: 1
          items:
            type: integer
            format: int32
        stock:
          type: boolean
        archived:
          type: boolean
        locked:
          type: boolean
    LunchboxEdit:
      type: object
      required:
        - name
        - price
        - products
      properties:
        name:
          type: string
          pattern: ".{6,}"
        price:
          type: integer
          minimum: 1
          format: int32
        products:
          type: array
          minItems: 1
          items:
            type: integer
            format: int32
    LunchboxClient:
      type: object
      required:
        - id
        - name
        - price
        - products
        - stock
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          pattern: ".{6,}"
        price:
          type: integer
          minimum: 1
          format: int32
        products:
          type: array
          minItems: 1
          items:
            type: integer
            format: int32
        stock:
          type: boolean
    LunchboxClientFull:
      type: object
      required:
        - id
        - name
        - price
        - products
        - stock
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          pattern: ".{6,}"
        price:
          type: integer
          minimum: 1
          format: int32
        products:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/ProductEdit"
        stock:
          type: boolean
    OrderEdit:
      type: object
      required:
        - boxes
        - timeslot
      properties:
        boxes:
          type: array
          minItems: 1
          items:
            type: integer
            format: int32
        timeslot:
          type: integer
          format: int32
  parameters:
    id:
      name: id
      in: path
      description: Уникальный id цели
      required: true
      schema:
        type: integer
        minimum: 1
        format: int32
    status:
      name: status
      in: query
      description: Выборка заказов по статусу
      required: false
      schema:
        type: array
        items:
          type: integer
        nullable: true
        default: null
    limit:
      name: limit
      in: query
      description: Ограничение размера выдачи
      required: false
      schema:
        type: integer
        nullable: true
        default: null
    offset:
      name: offset
      in: query
      description: Пропуск записей в выдаче
      required: false
      schema:
        type: integer
        nullable: true
        default: null
    locked:
      name: locked
      in: query
      description: Флаг подгрузки заблокированных для изменения данных
      required: false
      schema:
        type: boolean
        nullable: true
        default: null
    stock:
      name: stock
      in: query
      description: Флаг наличия
      required: true
      schema:
        type: boolean
        nullable: false
        default: true
    archived:
      name: archived
      in: query
      description: Флаг подгрузки архивированных данных
      required: false
      schema:
        type: boolean
        nullable: true
        default: null
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: py.operations.authentication.decode_token